{"ast":null,"code":"import _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"C:\\\\Users\\\\yovad\\\\Documents\\\\COURS\\\\Portfolio\\\\jp-game\\\\components\\\\RandomColor\\\\RandomColor.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\n\nvar Color = function () {\n  function Color(name, backgroundColor, range, pivotHue) {\n    _classCallCheck(this, Color);\n\n    this.name = name;\n    this.backgroundColor = backgroundColor;\n    this.range = range;\n    this.pivotHue = pivotHue;\n  }\n\n  _createClass(Color, [{\n    key: \"CheckIfColorCorrespond\",\n    value: function CheckIfColorCorrespond(r, g, b) {\n      var normalizedR = r / 255;\n      var normalizedG = g / 255;\n      var normalizedB = b / 255;\n      var cmin = Math.min(normalizedR, normalizedG, normalizedB);\n      var cmax = Math.max(normalizedR, normalizedG, normalizedB);\n      var delta = cmax - cmin;\n      var h = 0;\n      var s = 0;\n      var l = 0;\n\n      if (delta == 0) {\n        h = 0;\n        console.log(\"Delta 0\");\n      } else if (cmax == r) {\n          h = (g - b) / delta % 6;\n          console.log(\"cmax is red\");\n        } else if (cmax == g) h = (b - r) / delta + 2;else h = (r - g) / delta + 4;\n\n      h = Math.round(h * 60);\n      var isColorCorresponding;\n\n      if (h <= this.pivotHue + this.range && h >= this.pivotHue - this.range) {\n        isColorCorresponding = true;\n      } else {\n        isColorCorresponding = false;\n      }\n\n      return isColorCorresponding;\n    }\n  }]);\n\n  return Color;\n}();\n\nvar redColor = new Color(\"Red\", \"#f54242\", 15, 0);\nvar testRGB = [140, 54, 36];\n\nvar RandomColor = function (_React$Component) {\n  _inherits(RandomColor, _React$Component);\n\n  var _super = _createSuper(RandomColor);\n\n  function RandomColor() {\n    _classCallCheck(this, RandomColor);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(RandomColor, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, \" \", redColor.name + \" : \" + redColor.backgroundColor + \" / \" + redColor.range + \" / \" + redColor.pivotHue, \" \"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }\n      }, \" \", \"Is color : \" + redColor.CheckIfColorCorrespond(testRGB[0], testRGB[1], testRGB[2]), \" \"));\n    }\n  }]);\n\n  return RandomColor;\n}(React.Component);\n\nexport default RandomColor;","map":{"version":3,"sources":["C:/Users/yovad/Documents/COURS/Portfolio/jp-game/components/RandomColor/RandomColor.js"],"names":["React","Color","name","backgroundColor","range","pivotHue","r","g","b","normalizedR","normalizedG","normalizedB","cmin","Math","min","cmax","max","delta","h","s","l","console","log","round","isColorCorresponding","redColor","testRGB","RandomColor","CheckIfColorCorrespond","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { StyleSheet, Text, View } from 'react-native';\r\n\r\n\r\nclass Color{\r\n\r\n    constructor(name, backgroundColor, range, pivotHue){\r\n        this.name = name;\r\n        this.backgroundColor = backgroundColor;\r\n        this.range = range;\r\n        this.pivotHue = pivotHue;\r\n    }\r\n\r\n    CheckIfColorCorrespond(r, g, b){\r\n        const normalizedR = r/255\r\n        const normalizedG = g/255\r\n        const normalizedB = b/255\r\n\r\n        let cmin = Math.min(normalizedR, normalizedG, normalizedB)\r\n        let cmax = Math.max(normalizedR, normalizedG, normalizedB)\r\n        let delta = cmax - cmin\r\n        \r\n        let h = 0\r\n        let s = 0\r\n        let l = 0\r\n\r\n        //Pour le moment ou n'utilise que la Hue, le reste n'est pas obligatoire\r\n        \r\n        // Calculate hue\r\n        // No difference\r\n        if (delta == 0){\r\n            h = 0;\r\n            console.log(\"Delta 0\")\r\n        }\r\n        // Red is max\r\n        else if (cmax == r){\r\n            h = ((g - b) / delta) % 6;\r\n            console.log(\"cmax is red\")\r\n        }\r\n\r\n        // Green is max\r\n        else if (cmax == g)\r\n            h = (b - r) / delta + 2;\r\n        // Blue is max\r\n        else\r\n            h = (r - g) / delta + 4;\r\n\r\n        h = Math.round(h * 60);\r\n        \r\n        // Make negative hues positive behind 360Â°\r\n        /*if (h < 0)\r\n            h += 360;*/\r\n\r\n        let isColorCorresponding;\r\n\r\n        if(h <= this.pivotHue + this.range && h >= this.pivotHue - this.range ){\r\n            isColorCorresponding = true;\r\n        }\r\n        else{\r\n            isColorCorresponding = false;\r\n        }\r\n\r\n        return isColorCorresponding;\r\n    }\r\n\r\n}\r\n\r\nconst redColor = new Color(\"Red\", \"#f54242\", 15, 0)\r\nconst testRGB = [140, 54, 36]\r\n\r\nclass RandomColor extends React.Component {\r\n\r\n    render() { \r\n        return (\r\n            <View>\r\n                <Text> { redColor.name + \" : \" + redColor.backgroundColor + \" / \" + redColor.range + \" / \" + redColor.pivotHue} </Text>\r\n                <Text> { \"Is color : \" + redColor.CheckIfColorCorrespond( testRGB[0], testRGB[1],testRGB[2] ) } </Text>\r\n            </View>\r\n        );\r\n    }\r\n\r\n}\r\n \r\nexport default RandomColor ;"]},"metadata":{},"sourceType":"module"}